-- Restructure user system with proper separation of concerns
-- Drop existing users table and recreate with proper schema

DROP TABLE IF EXISTS users CASCADE;

-- Users table: Identity and basic info only
CREATE TABLE users (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    discord_id TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT true,
    banned BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Guilds table: Discord servers with configuration
CREATE TABLE guilds (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    discord_guild_id TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT true,
    config JSONB NOT NULL DEFAULT '{
        "discord": {
            "announcement_channel_id": null,
            "leaderboard_channel_id": null,
            "bot_command_prefix": "!usl"
        },
        "permissions": {
            "admin_role_ids": [],
            "moderator_role_ids": []
        }
    }'::jsonb,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- User-Guild memberships with roles and permissions
CREATE TABLE user_guild_memberships (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    guild_id BIGINT NOT NULL REFERENCES guilds(id) ON DELETE CASCADE,
    discord_roles TEXT[] DEFAULT '{}',
    usl_permissions TEXT[] DEFAULT '{}', -- admin, moderator, stats_viewer, user_manager
    joined_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE(user_id, guild_id)
);

-- Current effective MMR per user per guild
CREATE TABLE player_effective_mmr (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    guild_id BIGINT NOT NULL REFERENCES guilds(id) ON DELETE CASCADE,
    mmr INTEGER NOT NULL DEFAULT 0,
    trueskill_mu DECIMAL(10,3) NOT NULL DEFAULT 1500.0,
    trueskill_sigma DECIMAL(10,3) NOT NULL DEFAULT 8.333,
    games_played INTEGER NOT NULL DEFAULT 0,
    last_updated TIMESTAMPTZ NOT NULL DEFAULT now(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE(user_id, guild_id)
);

-- Historical MMR changes for auditing and analytics
CREATE TABLE player_historical_mmr (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    guild_id BIGINT NOT NULL REFERENCES guilds(id) ON DELETE CASCADE,
    mmr_before INTEGER,
    mmr_after INTEGER NOT NULL,
    trueskill_mu_before DECIMAL(10,3),
    trueskill_mu_after DECIMAL(10,3) NOT NULL,
    trueskill_sigma_before DECIMAL(10,3),
    trueskill_sigma_after DECIMAL(10,3) NOT NULL,
    change_reason TEXT NOT NULL, -- match_result, manual_adjustment, season_reset
    match_id BIGINT, -- Future: link to matches table
    changed_by_user_id BIGINT REFERENCES users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Indexes for performance
CREATE INDEX idx_users_discord_id ON users(discord_id);
CREATE INDEX idx_users_active ON users(active) WHERE active = true;
CREATE INDEX idx_guilds_discord_guild_id ON guilds(discord_guild_id);
CREATE INDEX idx_user_guild_memberships_user_id ON user_guild_memberships(user_id);
CREATE INDEX idx_user_guild_memberships_guild_id ON user_guild_memberships(guild_id);
CREATE INDEX idx_user_guild_memberships_active ON user_guild_memberships(guild_id, active) WHERE active = true;
CREATE INDEX idx_player_effective_mmr_guild_mmr ON player_effective_mmr(guild_id, mmr DESC);
CREATE INDEX idx_player_historical_mmr_user_guild ON player_historical_mmr(user_id, guild_id, created_at DESC);

-- RLS Policies (Row Level Security)
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE guilds ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_guild_memberships ENABLE ROW LEVEL SECURITY;
ALTER TABLE player_effective_mmr ENABLE ROW LEVEL SECURITY;
ALTER TABLE player_historical_mmr ENABLE ROW LEVEL SECURITY;

-- Users can read their own data
CREATE POLICY "Users can view own data" ON users 
    FOR SELECT USING (auth.uid()::text = discord_id);

-- Guild members can view guild data
CREATE POLICY "Guild members can view guild" ON guilds 
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM user_guild_memberships ugm 
            JOIN users u ON u.id = ugm.user_id 
            WHERE ugm.guild_id = guilds.id 
            AND u.discord_id = auth.uid()::text 
            AND ugm.active = true
        )
    );

-- Users can view their own memberships
CREATE POLICY "Users can view own memberships" ON user_guild_memberships 
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM users u 
            WHERE u.id = user_guild_memberships.user_id 
            AND u.discord_id = auth.uid()::text
        )
    );

-- Guild members can view effective MMR in their guilds
CREATE POLICY "Guild members can view mmr" ON player_effective_mmr 
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM user_guild_memberships ugm 
            JOIN users u ON u.id = ugm.user_id 
            WHERE ugm.guild_id = player_effective_mmr.guild_id 
            AND u.discord_id = auth.uid()::text 
            AND ugm.active = true
        )
    );

-- Guild members can view historical MMR in their guilds
CREATE POLICY "Guild members can view mmr history" ON player_historical_mmr 
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM user_guild_memberships ugm 
            JOIN users u ON u.id = ugm.user_id 
            WHERE ugm.guild_id = player_historical_mmr.guild_id 
            AND u.discord_id = auth.uid()::text 
            AND ugm.active = true
        )
    );

-- Functions to automatically update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply update triggers
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_guilds_updated_at BEFORE UPDATE ON guilds
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_guild_memberships_updated_at BEFORE UPDATE ON user_guild_memberships
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_player_effective_mmr_updated_at BEFORE UPDATE ON player_effective_mmr
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();